Description: 
Recursion occurs any time a function calls itself. In addition, 
the function has an "escape case" through which it doesn't call itself, 
but rather, it returns a value, such as an integer or a double. 

Each time, the recursive call must come closer to this 'escape case' by 
using different arguments.

The program below is modeled off of the famous Fibonacci Sequence, in which
a number is calculated by adding the previous two values: for instance, the 
sequence starts with 0 and 1, as indexes 0 and 1 respectively. Index 2 will 
be the addition of index 0 and 1's values, and therefore, is 1. Index 3, as a result, 
will be 2, because it adds index 1 and 2's values.  

Program Source Code: 

public class Recursion {
    public static void main(String[] args) {
        System.out.println("\n----- The Fibonacci Sequence -----\n");

        for (int i = 0; i < 11; i++) {
            System.out.println("Fibonacci(" + i + ") = " + fibonacci(i));
        }
    }

    public static int fibonacci(int index) {
        if (index == 0) {
            return 0;
        } else if (index == 1) {
            return 1;
        } else {
            return fibonacci(index - 2) + fibonacci(index - 1);
        }
    }
}

Program Output: 

----- The Fibonacci Sequence -----

Fibonacci(0) = 0
Fibonacci(1) = 1
Fibonacci(2) = 1
Fibonacci(3) = 2
Fibonacci(4) = 3
Fibonacci(5) = 5
Fibonacci(6) = 8
Fibonacci(7) = 13
Fibonacci(8) = 21
Fibonacci(9) = 34
Fibonacci(10) = 55

