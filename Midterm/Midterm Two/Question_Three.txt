Method overloading allows two or more methods to have the same name, but
different signatures: they can either differ in the number of 
input parameters, or type of each parameter. They can even differ in 
both. 

Example Source Code: 

public class Question_Three {
   public static void main(String[] args) {
      multiply(5, 6);
      multiply(2.5, 1.5);
      multiply(2, 7, 3);
      multiply(1.5, 2.5, 3.5);
   }

   public static void multiply (int x, int y) {
      System.out.println(x * y);;
   }

   public static void multiply (double x, double y) {
      System.out.println(x * y);;
   }

   public static void multiply (int x, int y, int z) {
      System.out.println(x * y * z);;
   }

   public static void multiply (double x, double y, double z) {
      System.out.println(x * y * z);;
   }
}

Example Output: 

30
3.75
42
13.125

Example Explanation: 

We have four methods named 'multiply'. Each takes their 
parameters and prints out their product. However, the difference
between the first two, which each take in two parameters, is that the 
first takes integers, and the second takes doubles. This feature allows
the first two calls to function. The third and fourth work similarly, 
but with three parameters. 